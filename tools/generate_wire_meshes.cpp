#include <sstream>
#include <fstream>
#include <cmath>
#include <string>
#include <vector>
#include <iostream>

static const std::string GEN_MESSAGE = "// Generated by generate_wire_meshes.cpp";
static const std::string BASE_FILENAME = "src/client/gen/wire_meshes";

static std::vector<float> get_cube_vertices()
{
    std::vector<float> verts;

    for (auto t = -0.5f; t < 5.1f; t += 1.0f) {
        verts.insert(verts.end(), {
            -0.5f, -0.5f, t, 
            -0.5f,  0.5f, t, 
            -0.5f,  0.5f, t, 
             0.5f,  0.5f, t, 
             0.5f,  0.5f, t, 
             0.5f, -0.5f, t,
             0.5f, -0.5f, t, 
            -0.5f, -0.5f, t,
             t,  t, -0.5f,
             t,  t,  0.5f,
             t, -t, -0.5f,
             t, -t,  0.5f,
            -t,  t, -0.5f,
            -t,  t,  0.5f,
            -t, -t, -0.5f,
            -t, -t,  0.5f,
        });
    }

    return verts;
}

static std::vector<float> get_sphere_vertices()
{
    std::vector<float> verts;

    for (auto i = 0; i < 3; ++i) {
        for (auto t = 0.0f; t < 2*3.14159f; t += 0.1f) {
            if (i == 0) verts.push_back(0.0f);
            verts.push_back(sinf(t - 0.1f));
            if (i == 1) verts.push_back(0.0f);
            verts.push_back(cosf(t - 0.1f));
            if (i == 2) verts.push_back(0.0f);

            if (i == 0) verts.push_back(0.0f);
            verts.push_back(sinf(t));
            if (i == 1) verts.push_back(0.0f);
            verts.push_back(cosf(t));
            if (i == 2) verts.push_back(0.0f);
        }
    }

    return verts;
}

static std::string join_floats(const std::vector<float>& floats)
{
    std::stringstream result;
    for (auto i = 0; i < floats.size(); ++i) {
        result << floats[i] << "f";
        if (i < floats.size() - 1) result << ",";
    }
    return result.str();
}

int main(int argc, char **argv)
{
    std::stringstream hpp_stream;
    std::stringstream cpp_stream;

    hpp_stream << GEN_MESSAGE << std::endl;
    hpp_stream << "#pragma once" << std::endl;
    hpp_stream << "#include \"../resources.hpp\"" << std::endl;
    hpp_stream << "struct WireMeshes {" << std::endl;
    hpp_stream << "WireMeshes() =delete;" << std::endl;

    cpp_stream << GEN_MESSAGE << std::endl;
    cpp_stream << "#include \"wire_meshes.hpp\"" << std::endl;

    auto add = [&](const std::string& name, const std::vector<float>& data) {
        hpp_stream << "static const WireMesh "<<name<<";" << std::endl;

        cpp_stream << "static float "<<name<<"_data[] = {" << std::endl;
        cpp_stream << join_floats(data) << std::endl;
        cpp_stream << "}; const WireMesh WireMeshes::"<<name<<" = { "<<name<<"_data, sizeof("<<name<<"_data) };" << std::endl;
    };

    add("CUBE", get_cube_vertices());
    add("SPHERE", get_sphere_vertices());

    hpp_stream << "};" << std::endl;

    auto hpp_file = BASE_FILENAME + ".hpp";
    auto cpp_file = BASE_FILENAME + ".cpp";
    std::ofstream out_hpp(hpp_file.c_str(), std::ofstream::out);
    std::ofstream out_cpp(cpp_file.c_str(), std::ofstream::out);
    out_hpp << hpp_stream.rdbuf();
    out_cpp << cpp_stream.rdbuf();

    return 0;
}