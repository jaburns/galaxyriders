const fs = require('fs');
const path = require('path');

const GEN_MESSAGE = "// Generated by generate_wire_meshes.js";

const writeFile = (extension, contents) =>
    fs.writeFileSync(path.resolve(__dirname, '../src/client/gen/wire_meshes.'+extension), contents, 'utf-8');

const getCubeVerts = () => {
    const result = [];
    for (let t = -0.5; t < 5.1; t += 1.0) {
        result.push(
            -0.5, -0.5, t, 
            -0.5,  0.5, t, 
            -0.5,  0.5, t, 
             0.5,  0.5, t, 
             0.5,  0.5, t, 
             0.5, -0.5, t,
             0.5, -0.5, t, 
            -0.5, -0.5, t,
             t,  t, -0.5,
             t,  t,  0.5,
             t, -t, -0.5,
             t, -t,  0.5,
            -t,  t, -0.5,
            -t,  t,  0.5,
            -t, -t, -0.5,
            -t, -t,  0.5
        );
    }
    return result;
};

const getSphereVerts = () => {
    const result = [];
    for (let i = 0; i < 3; ++i) {
        for (let t = 0; t < 2*Math.PI; t += 0.1) {
            if (i == 0) result.push(0.0);
            result.push(Math.sin(t - 0.1));
            if (i == 1) result.push(0.0);
            result.push(Math.cos(t - 0.1));
            if (i == 2) result.push(0.0);

            if (i == 0) result.push(0.0);
            result.push(Math.sin(t));
            if (i == 1) result.push(0.0);
            result.push(Math.cos(t));
            if (i == 2) result.push(0.0);
        }
    }
    return result;
};

const meshes = [
    { name: "CUBE", verts: getCubeVerts() },
    { name: "SPHERE", verts: getSphereVerts() },
];

const formatFloat = val => {
    let ret = val.toString();
    if (ret.indexOf('.') < 0) ret += '.0';
    return ret + 'f';
};

const HPP_HEADER = `${GEN_MESSAGE}
#pragma once
#include "../resources.hpp"
struct WireMeshes {
WireMeshes() =delete;`;

const CPP_HEADER = `${GEN_MESSAGE}
#include "wire_meshes.hpp"`;

const hppInner = mesh => `static const WireMesh ${mesh.name};`

const cppInner = mesh => `static float ${mesh.name}_data[] = {
${mesh.verts.map(formatFloat).join(',')}
}; const WireMesh WireMeshes::${mesh.name} = { ${mesh.name}_data, sizeof(${mesh.name}_data) };`;

writeFile('hpp', [HPP_HEADER, meshes.map(hppInner).join('\n'), '};'].join('\n'));
writeFile('cpp', [CPP_HEADER, meshes.map(cppInner).join('\n')].join('\n'));